/*
 * Copyright (C) 2018 jlortiz
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import java.awt.event.WindowEvent;
import java.io.ByteArrayInputStream;
import java.io.ObjectInputStream;
import java.util.Base64;
import java.util.HashMap;
import java.util.Scanner;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
/**
 *
 * @author jlortiz
 */
public class JMailManager extends javax.swing.JFrame {

    private final String soft;
    private final String host;
    private DefaultMutableTreeNode ls;
    private final String un;

    private DefaultMutableTreeNode deserialize(String s) {
        HashMap<String,HashMap> mp;
        byte[] data = Base64.getDecoder().decode(s);
        try (ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(data))) {
            mp =(HashMap<String,HashMap>)ois.readObject();
        } catch (Exception e) {
            JMail.crash("Could not get directory tree!", "Error");
            return null;
        }
        return deserialize(this.un, mp);
    }
    private static DefaultMutableTreeNode deserialize(String name, HashMap<String, HashMap> mp) {
        DefaultMutableTreeNode node = new DefaultMutableTreeNode(name);
        mp.keySet().forEach((s) -> {
            node.add(deserialize(s, mp.get(s)));
        });
        return node;
    }
    
    /**
     * Creates new form JMailManager
     * @param host
     * @param soft
     * @param un
     */
    public JMailManager(String host, String soft, String un) {
        this.host=host;
        this.soft=soft;
        this.un=un;
        this.ls=deserialize(JMail.getResponse("TREE"));
        initComponents();
        this.setTitle("JMail: "+un+" on "+host);
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree(new DefaultTreeModel(ls));
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<String>();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        delMsg = new javax.swing.JButton();
        moveMsg = new javax.swing.JButton();
        replMsg = new javax.swing.JButton();
        delFold = new javax.swing.JButton();
        newFold = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        sendTo = new javax.swing.JTextField();
        sendSubject = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        sendBody = new javax.swing.JTextArea();
        sendButton = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        dcB = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        chPsButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jTree1.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTree1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jTree1);

        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(jList1);

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setToolTipText("");
        jScrollPane3.setViewportView(jTextArea1);

        delMsg.setText("Delete");
        delMsg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delMsgActionPerformed(evt);
            }
        });

        moveMsg.setText("Move");

        replMsg.setText("Reply");

        delFold.setText("Delete");
        delFold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delFoldActionPerformed(evt);
            }
        });

        newFold.setText("New");
        newFold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newFoldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(delFold, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(newFold)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(delMsg)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(moveMsg)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(replMsg)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(106, 106, 106))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane3)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(delMsg)
                            .addComponent(moveMsg)
                            .addComponent(replMsg)
                            .addComponent(delFold)
                            .addComponent(newFold))))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Mail", jPanel1);

        jLabel1.setText("To:");

        jLabel2.setText("Subject:");

        sendBody.setColumns(20);
        sendBody.setRows(5);
        jScrollPane4.setViewportView(sendBody);

        sendButton.setText("Send");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        jButton5.setText("Clear");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sendTo)
                            .addComponent(sendSubject)))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 603, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sendButton)
                .addGap(17, 17, 17))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(sendTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(sendSubject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sendButton)
                    .addComponent(jButton5))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Compose", jPanel2);

        dcB.setText("Disconnect");
        dcB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dcBActionPerformed(evt);
            }
        });

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("JMail Java 1.2 by jlortiz");

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText(host);

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText(soft);

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Connected to:");

        chPsButton.setText("Change Password");
        chPsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chPsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 603, Short.MAX_VALUE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(258, 258, 258)
                        .addComponent(dcB)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(chPsButton)
                .addGap(239, 239, 239))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(dcB)
                .addGap(40, 40, 40)
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addComponent(jLabel10)
                .addGap(18, 18, 18)
                .addComponent(jLabel8)
                .addGap(18, 18, 18)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addComponent(chPsButton)
                .addGap(26, 26, 26))
        );

        jTabbedPane1.addTab("About/Disconnect", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 615, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void dcBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dcBActionPerformed
        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_dcBActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        JMail.sock.send("QUIT");
        JMail.sock.close();
        this.dispose();
        System.exit(0);
    }//GEN-LAST:event_formWindowClosing

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        sendBody.setText("");
        sendSubject.setText("");
        sendTo.setText("");
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jTree1ValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTree1ValueChanged
        if (jTree1.getSelectionPath()==null) {
            jList1.setListData(new String[]{});
            jList1.clearSelection();
            return;
        }
        StringBuilder builder = new StringBuilder();
        for(Object s: evt.getPath().getPath()) {
            builder.append((String)((DefaultMutableTreeNode)s).getUserObject());
            builder.append("\\");
        }
        jList1.setListData(JMail.getResponse("GET "+builder.delete(0, un.length()).toString()).split("\n"));
        jList1.clearSelection();
    }//GEN-LAST:event_jTree1ValueChanged

    private void delFoldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delFoldActionPerformed
        if (jTree1.getSelectionPath()==null)
            return;
        if (jTree1.getSelectionPath().getPathCount()==1) {
            if (JOptionPane.showConfirmDialog(this,
            "WARNING: If you delete this folder, your account will be deleted.\nProceed?",
            "Account deletion",
            JOptionPane.WARNING_MESSAGE)==JOptionPane.YES_OPTION) {
                JMail.sock.send("DEL ..");
                JMail.sock.close();
                this.dispose();
                System.exit(0);
            }
        } else {
            if (JOptionPane.showConfirmDialog(this,
            "Delete folder "+jTree1.getSelectionPath().getLastPathComponent()+"?",
            "Folder deletion",
            JOptionPane.WARNING_MESSAGE)==JOptionPane.YES_OPTION) {
                StringBuilder builder = new StringBuilder();
                for(Object s: jTree1.getSelectionPath().getPath()) {
                    builder.append((String)((DefaultMutableTreeNode)s).getUserObject());
                    builder.append("\\");
                }
                JMail.sock.send("DEL "+builder.delete(0, un.length()).toString());
                this.ls=deserialize(JMail.getResponse("TREE"));
                jTree1.clearSelection();
                ((DefaultTreeModel)jTree1.getModel()).setRoot(ls);
            }
        }
    }//GEN-LAST:event_delFoldActionPerformed

    private void newFoldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newFoldActionPerformed
        if (jTree1.getSelectionPath()==null)
            return;
        StringBuilder builder = new StringBuilder();
        for(Object s: jTree1.getSelectionPath().getPath()) {
            builder.append((String)((DefaultMutableTreeNode)s).getUserObject());
            builder.append("\\");
        }
        String file = JOptionPane.showInputDialog(this, "Enter new folder name:", "New folder...", JOptionPane.PLAIN_MESSAGE);
        if (file.isEmpty())
            return;
        builder.append(file);
        JMail.sock.send("NEW "+builder.delete(0, un.length()).toString());
        this.ls=deserialize(JMail.getResponse("TREE"));
        jTree1.clearSelection();
        ((DefaultTreeModel)jTree1.getModel()).setRoot(ls);
    }//GEN-LAST:event_newFoldActionPerformed

    private void chPsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chPsButtonActionPerformed
        String cpass = JOptionPane.showInputDialog(this, "Please enter your current password:", "Password change", -1);
        if (cpass==null || cpass.isEmpty())
            return;
        String npass = JOptionPane.showInputDialog(this, "Enter new password:", "Password change", -1);
        if (npass==null || npass.isEmpty())
            return;
        if (!npass.equals(JOptionPane.showInputDialog(this, "Confirm new password:", "Password change", -1))) {
            JMail.error("Passwords do not match!", "Password change error");
            return;
        }
        if (JMail.getResponse("PC "+blake.hash(cpass, un)+" "+blake.hash(npass, un)).equals("true")) {
            JOptionPane.showMessageDialog(this, "Password change sucessful!\nDon't forget to update your\npassword manager.", "Password change", 1);
        } else {
            JMail.error("Passchange failed!", "Password change");
        }
    }//GEN-LAST:event_chPsButtonActionPerformed

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        Scanner responses = new Scanner(JMail.getResponse("DATA "+sendTo.getText().replace(',',' ')+"\n"+sendSubject.getText()+"\n"+sendBody.getText()));
        if (!responses.hasNext()) {
            JOptionPane.showMessageDialog(this,
            "Mail sent with no errors",
            "Sendmail",
            JOptionPane.PLAIN_MESSAGE);
            sendBody.setText("");
            sendSubject.setText("");
            sendTo.setText("");
            return;
        }
        StringBuilder builder = new StringBuilder("The following errors occoured:\n\n");
        String lastServer="";
        while (responses.hasNextLine()) {
            String resp = responses.nextLine();
            if (resp.split(":")[0]!=lastServer) {
                builder.append("On server ");
                builder.append(resp.split(":")[0]);
                builder.append("\n");
            }
            switch(resp.split(": ")[1]) {
                case "getmail":
                    builder.append(" - Server does not accept outside mail.\n");
                    break;
                case "badHost":
                    builder.append(" - Server could not be found.\n");
                    break;
                case "io":
                    builder.append(" - A network error occoured.\n");
                    break;
                default:
                    switch (resp.split(": ")[1].substring(0,5)) {
                       case "User ":
                            builder.append(" - ");
                            builder.append(resp.split(": ")[1]);
                            builder.append(" does not exist.\n");
                            break;
                       case "exists":
                            builder.append(" - User ");
                            builder.append(resp.split(": ")[1].substring(7));
                            builder.append(" already has that email.\n");
                       case "write":
                            builder.append(" - A filesystem error occoured while sending to");
                            builder.append(resp.split(": ")[1].substring(7));
                            builder.append(".\n");
                            break;
                       default:
                            builder.append("Unknown error: ");
                            builder.append(resp.split(": ")[1]);
                    }
            }
        }
        JMail.error(builder.toString(), "Sendmail");
    }//GEN-LAST:event_sendButtonActionPerformed

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
        if (jList1.getSelectedValue() == null || jList1.getSelectedValue().equals("") || jList1.getSelectedValue().equals("false"))
            return;
        StringBuilder builder = new StringBuilder();
        for(Object s: jTree1.getSelectionPath().getPath()) {
            builder.append((String)((DefaultMutableTreeNode)s).getUserObject());
            builder.append("\\");
        }
        builder.append(jList1.getSelectedValue());
        jTextArea1.setText(JMail.getResponse("GET "+builder.delete(0, un.length()).toString()));
    }//GEN-LAST:event_jList1ValueChanged

    private void delMsgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delMsgActionPerformed
        if (jTree1.getSelectionPath()==null || jList1.getSelectedIndex()==-1 || jList1.getSelectedValue().equals(""))
            return;
        StringBuilder builder = new StringBuilder();
        for(Object s: jTree1.getSelectionPath().getPath()) {
            builder.append((String)((DefaultMutableTreeNode)s).getUserObject());
            builder.append("\\");
        }
        builder.append(jList1.getSelectedValue());
        jTextArea1.setText("");
        JMail.sock.send("DEL "+builder.delete(0, un.length()).toString());
        builder = new StringBuilder();
        for(Object s: jTree1.getSelectionPath().getPath()) {
            builder.append((String)((DefaultMutableTreeNode)s).getUserObject());
            builder.append("\\");
        }
        jList1.setListData(JMail.getResponse("GET "+builder.delete(0, un.length()).toString()).split("\n"));
        jList1.clearSelection();
    }//GEN-LAST:event_delMsgActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton chPsButton;
    private javax.swing.JButton dcB;
    private javax.swing.JButton delFold;
    private javax.swing.JButton delMsg;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTree jTree1;
    private javax.swing.JButton moveMsg;
    private javax.swing.JButton newFold;
    private javax.swing.JButton replMsg;
    private javax.swing.JTextArea sendBody;
    private javax.swing.JButton sendButton;
    private javax.swing.JTextField sendSubject;
    private javax.swing.JTextField sendTo;
    // End of variables declaration//GEN-END:variables
}
